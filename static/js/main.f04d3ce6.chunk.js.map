{"version":3,"sources":["Tasks.js","AddTask.js","Clock.js","App.js","serviceWorker.js","index.js"],"names":["Tasks","_ref","tasks","deleteTask","taskList","length","map","task","react_default","a","createElement","react_flip_move_es","key","id","className","onClick","content","duration","easing","AddTask","state","handleChange","e","_this","setState","target","value","handleSubmit","preventDefault","props","addTask","onSubmit","this","type","onChange","Component","Clock","date","Date","_this2","timerID","setInterval","updateClock","clearInterval","toLocaleTimeString","App","filter","Math","random","concat","Object","toConsumableArray","src_Clock","clock","src_Tasks","src_AddTask","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPA4BeA,EAzBD,SAAAC,GAAyB,IAAvBC,EAAuBD,EAAvBC,MAAOC,EAAgBF,EAAhBE,WACdC,EAAWF,EAAMG,OACnBH,EAAMI,IAAI,SAAAC,GACN,OACCC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACGH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAKM,GAAIC,UAAY,UAC3BN,EAAAC,EAAAC,cAAA,QAAMK,QAAS,WAAOZ,EAAWI,EAAKM,MAAON,EAAKS,aAK7DR,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAAA,KAAGI,UAAU,UAAb,cAGT,OACIN,EAAAC,EAAAC,cAAA,OAAKI,UAAY,aACjBN,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUM,SAAU,IAAKC,OAAO,YAC5BV,EAAAC,EAAAC,cAAA,UAAKN,MCSDe,6MA3BZC,MAAQ,CACJJ,QAAS,MAEbK,aAAe,SAACC,GACZC,EAAKC,SAAS,CACVR,QAASM,EAAEG,OAAOC,WAG1BC,aAAe,SAACL,GACZA,EAAEM,iBACFL,EAAKM,MAAMC,QAAQP,EAAKH,OACxBG,EAAKC,SAAS,CACVR,QAAS,8EAIb,OACIR,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMqB,SAAUC,KAAKL,cACjBnB,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,SAAOuB,KAAK,OAAOC,SAAUF,KAAKX,aAAcK,MAAOM,KAAKZ,MAAMJ,mBArB/DmB,aC2BLC,6MAzBdhB,MAAQ,CACJiB,KAAM,IAAIC,yFAEO,IAAAC,EAAAP,KACnBA,KAAKQ,QAAUC,YACb,kBAAMF,EAAKG,eACX,oDAIFC,cAAcX,KAAKQ,+CAGnBR,KAAKR,SAAS,CACZa,KAAM,IAAIC,wCAIZ,OACE9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKsB,KAAKZ,MAAMiB,KAAKO,8BAtBVT,aCkCLU,6MA9BdzB,MAAQ,CACNlB,MAAO,MAETC,WAAa,SAACU,GACZ,IAAMX,EAAQqB,EAAKH,MAAMlB,MAAM4C,OAAO,SAAAvC,GACpC,OAAOA,EAAKM,KAAOA,IAErBU,EAAKC,SAAS,CACZtB,aAGJ4B,QAAU,SAACvB,GACTA,EAAKM,GAAKkC,KAAKC,SACf,IAAI9C,EAAK,GAAA+C,OAAAC,OAAAC,EAAA,EAAAD,CAAO3B,EAAKH,MAAMlB,OAAlB,CAAyBK,IAClCgB,EAAKC,SAAS,CACZtB,mFAIF,OACEM,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iBACbN,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAC0C,EAAD,CAAOC,OAAK,IACZ7C,EAAAC,EAAAC,cAAC4C,EAAD,CAAOpD,MAAS8B,KAAKZ,MAAMlB,MAAOC,WAAY6B,KAAK7B,aACnDK,EAAAC,EAAAC,cAAC6C,EAAD,CAASzB,QAASE,KAAKF,kBAzBZK,aCOEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f04d3ce6.chunk.js","sourcesContent":["import React from 'react'\r\nimport FlipMove from \"react-flip-move\";\r\n\r\nconst Tasks = ({tasks, deleteTask}) => {\r\n   const taskList = tasks.length ? (\r\n       tasks.map(task => {\r\n           return (\r\n            <FlipMove>\r\n               <div key={task.id} className = \"center\">\r\n                   <span onClick={() => {deleteTask(task.id)}}>{task.content}</span>\r\n               </div>\r\n            </FlipMove>)\r\n       })\r\n   ) : (\r\n        <FlipMove>\r\n            <p className=\"center\">No tasks.</p>\r\n        </FlipMove>\r\n   )\r\n   return (\r\n       <div className = \"task list\">\r\n       <FlipMove duration={250} easing=\"ease-out\">\r\n           <h4>{taskList}</h4>\r\n           </FlipMove>\r\n       </div>\r\n   )\r\n\r\n}\r\n\r\nexport default Tasks\r\n","import React, {Component} from 'react'\r\n\r\nclass AddTask extends Component {\r\n   state = {\r\n       content: ''\r\n   }\r\n   handleChange = (e) => {\r\n       this.setState({\r\n           content: e.target.value\r\n       })\r\n   }\r\n   handleSubmit = (e) => {\r\n       e.preventDefault();\r\n       this.props.addTask(this.state);\r\n       this.setState({\r\n           content: ''\r\n       })\r\n   }\r\n   render(){\r\n       return(\r\n           <div>\r\n               <form onSubmit={this.handleSubmit}>\r\n                   <label>What do you have to do?</label>\r\n                   <input type=\"text\" onChange={this.handleChange} value={this.state.content}/>\r\n               </form>\r\n           </div>\r\n       )\r\n   }\r\n}\r\n\r\nexport default AddTask\r\n","import React, {Component} from 'react'\r\n\r\nclass Clock extends Component {\r\n  \r\n   state = {\r\n       date: new Date()\r\n   }\r\n    componentDidMount() {\r\n     this.timerID = setInterval(\r\n       () => this.updateClock(),\r\n       1000\r\n     );\r\n   }\r\n    componentWillUnmount() {\r\n     clearInterval(this.timerID);\r\n   }\r\n    updateClock() {\r\n     this.setState({\r\n       date: new Date()\r\n     });\r\n   }\r\n    render() {\r\n     return (\r\n       <div>  \r\n         <h3>{this.state.date.toLocaleTimeString()}</h3>\r\n       </div>\r\n     );\r\n   }\r\n }\r\n  export default Clock\r\n","import React, { Component } from 'react';\nimport Tasks from './Tasks'\nimport AddTask from './AddTask'\nimport Clock from './Clock'\n\nclass App extends Component {\n state = {\n   tasks: []\n }\n deleteTask = (id) => {\n   const tasks = this.state.tasks.filter(task =>{\n     return task.id !== id\n   });\n   this.setState({\n     tasks\n   })\n }\n addTask = (task) => {\n   task.id = Math.random();\n   let tasks = [...this.state.tasks, task]\n   this.setState({\n     tasks\n   })\n }\n render (){\n   return (\n     <div className=\"App container\">\n       <h1>Tasks</h1>\n       <Clock clock/>\n       <Tasks tasks = {this.state.tasks} deleteTask={this.deleteTask}/>\n       <AddTask addTask={this.addTask}/>\n     </div>\n   );\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}